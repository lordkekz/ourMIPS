# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Cache nuget packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Cache bin and obj
      uses: actions/cache@v3.2.6
      env:
        cache-name: cache-bin-obj
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: |
          **/bin/
          **/obj/
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
    
    - name: Dotnet Build
      uses: EasyDesk/action-dotnet-build@latest
    
    - name: Dotnet Publish
      # You may pin to the exact commit or the version.
      # uses: EasyDesk/action-dotnet-publish@75033960a28daa2ea89e0c1d8a04754568996506
      uses: EasyDesk/action-dotnet-publish@v1.0.0
      with:
        # Path to the project to publish.
        path: ourMIPSSharp_App/ourMIPSSharp_App.Desktop/ # optional, default is .
        # Directory where all packages will be put (default value is 'packages').
        #output-dir: # optional, default is packages
        # Build configuration for the build (default value is 'Release').
        #build-configuration: # optional, default is Release
        # Whether to skip the build using the --no-build flag (default value is 'true').
        #skip-build: # optional, default is true

    - name: Zip Release
      # You may pin to the exact commit or the version.
      # uses: TheDoctor0/zip-release@a24011d8d445e4da5935a7e73c1f98e22a439464
      uses: TheDoctor0/zip-release@0.7.1
      with:
        # Filename for archive
        filename: release.zip # default is release.zip
        # Base path for archive files
        #path:  # optional, default is .
        # Working directory before zipping
        directory: packages/ # optional, default is .
        # List of excluded files / directories
        #exclusions: # optional, default is 
        # List of excluded files / directories with recursive wildcards (only applies on Windows with `zip` type)
        #recursive_exclusions: # optional, default is 
        # Provide any custom parameters to the command
        #custom: # optional, default is 
        # Tool to use for archiving
        #type: # optional, default is zip

    - name: Upload Windows
      uses: actions/upload-artifact@v3
      with:
        name: Windows
        path: packages/OurMIPSSharp.exe
    - name: Upload Linux
      uses: actions/upload-artifact@v3
      with:
        name: Linux
        path: packages/OurMIPSSharp
        
